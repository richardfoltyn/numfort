
set(PACKAGE_VERSION "@NUMFORT_VERSION@")

set(PACKAGE_VERSION_COMPATIBLE FALSE)

if(PACKAGE_FIND_VERSION_MAJOR)
    if(PACKAGE_FIND_VERSION_MAJOR STREQUAL "@NUMFORT_VERSION_MAJOR@")
        set(PACKAGE_VERSION_COMPATIBLE TRUE)
    endif()
else()
    # if no specific version requested, assume that library is compatible
    set(PACKAGE_VERSION_COMPATIBLE TRUE)
endif()

set(PACKAGE_VERSION_EXACT FALSE)
if(PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
    set(PACKAGE_VERSION_EXACT TRUE)
endif()

# Check if library version is compatible with consumer Fortran compiler
# Compiler version used to compile library
set(_package_compiler_version @CMAKE_Fortran_COMPILER_VERSION@)
# Find major compiler version
string(REGEX REPLACE "(^[0-9]+).*" "\\1" _package_compiler_version_major "${_package_compiler_version}")
math(EXPR _package_compiler_version_major_next "${_package_compiler_version_major} + 1")

set(PACKAGE_VERSION_UNSUITABLE TRUE)
# Current compiler version used to build client
set(_version ${CMAKE_Fortran_COMPILER_VERSION})
if(CMAKE_Fortran_COMPILER_ID STREQUAL "@CMAKE_Fortran_COMPILER_ID@")
    if(_version VERSION_GREATER_EQUAL _package_compiler_version_major
            AND _version VERSION_LESS _package_compiler_version_major_next)
        set(PACKAGE_VERSION_UNSUITABLE FALSE)
    endif()
endif()

